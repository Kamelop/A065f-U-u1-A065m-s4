name: A06 Kernel Build

on:
  workflow_dispatch:
    inputs:
      USE_CLANG_18:
        description: 'Check to use Clang 18 instead of Clang 12'
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            git-core gnupg flex bison build-essential zip curl zlib1g-dev \
            gcc-multilib g++-multilib libc6-dev-i386 libncurses5-dev \
            x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev \
            libxml2-utils xsltproc unzip python3 python-is-python3 ccache tar wget

      - name: Enable ccache
        run: |
          export PATH="/usr/lib/ccache:$PATH"
          ccache --max-size=10G
          echo "CCACHE_DIR=$GITHUB_WORKSPACE/.ccache" >> $GITHUB_ENV

      - name: Prepare repo binary
        run: |
          mkdir -p $GITHUB_WORKSPACE/bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > $GITHUB_WORKSPACE/bin/repo
          chmod a+x $GITHUB_WORKSPACE/bin/repo
          echo "PATH=$GITHUB_WORKSPACE/bin:$PATH" >> $GITHUB_ENV

      - name: Kernel repo initialization and sync
        run: |
          export PATH="$GITHUB_WORKSPACE/bin:$PATH"
          mkdir -p kernel_build
          cd kernel_build

          if [ ! -d ".repo" ]; then
            repo init -u https://android.googlesource.com/kernel/manifest \
              -b common-android15-6.6 --depth=1 --quiet --no-repo-verify
          fi

          MAX_RETRIES=3
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Kernel repo sync attempt $i..."
            if timeout 15m repo sync -j$(nproc) --no-clone-bundle --quiet --force-sync || true; then
              echo "Kernel repo sync completed successfully."
              break
            else
              echo "Attempt $i failed or timed out."
              if [ $i -eq $MAX_RETRIES ]; then
                echo "Max retries reached. Exiting."
                exit 1
              fi
            fi
          done

      - name: Cache Kernel repo after fetch
        uses: actions/cache@v3
        with:
          path: kernel_build/.repo
          key: kernel-repo-${{ github.ref }}
          restore-keys: |
            kernel-repo-

      - name: Fetch toolchains
        run: |
          mkdir -p $GITHUB_WORKSPACE/toolchains
          cd $GITHUB_WORKSPACE/toolchains

          if [ "${{ github.event.inputs.USE_CLANG_18 }}" = "true" ]; then
            echo "Fetching Clang 18..."
            [ -d clang ] && rm -rf clang
            mkdir clang && cd clang
            wget -q -O clang18.tar.gz https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r522817.tar.gz
            tar -xf clang18.tar.gz
            rm clang18.tar.gz
            cd ..
          else
            echo "Fetching Clang 12..."
            [ -d clang ] && rm -rf clang
            git clone --depth=1 https://github.com/rsuntk/toolchains.git -b clang-12 clang
          fi

          [ -d gnu ] && rm -rf gnu
          git clone --depth=1 https://github.com/rsuntk/toolchains.git -b gcc-6.4 gnu

      - name: Cache Toolchains after fetch
        uses: actions/cache@v3
        with:
          path: |
            toolchains/clang
            toolchains/gnu
          key: toolchains-${{ github.ref }}
          restore-keys: |
            toolchains-

      - name: Set Build Environment and Export Target Config
        run: |
          export DEVICE_MODULES_DIR="kernel_device_modules-6.6"
          export BUILD_CONFIG="$GITHUB_WORKSPACE/kernel/build.config"  # generated inside kernel/
          export OUT_DIR="$GITHUB_WORKSPACE/out/target/product/a06/obj/KLEAF_OBJ"
          export DIST_DIR="$GITHUB_WORKSPACE/out/target/product/a06/obj/KLEAF_OBJ/dist"
          export DEFCONFIG_OVERLAYS="mt6768_overlay.config o8.config"
          export PROJECT="mgk_64_k66"
          export MODE="${GITHUB_RUNNER_NAME:-ci}"

          cd kernel
          python $DEVICE_MODULES_DIR/scripts/gen_build_config.py \
            --kernel-defconfig mediatek-bazel_defconfig \
            --kernel-defconfig-overlays "$DEFCONFIG_OVERLAYS" \
            --kernel-build-config-overlays "" \
            -m "$MODE" \
            -o build.config  # <-- generate directly inside kernel/

      - name: Build Kernel
        run: |
          cd kernel
          if [ -f build.config ]; then
              source build.config
          else
              echo "Error: build config not found at kernel/build.config"
              exit 1
          fi

          ./kernel_device_modules-6.6/build.sh

      - name: Show ccache stats
        run: |
          ccache --show-stats

      - name: Upload Kernel Image
        uses: actions/upload-artifact@v4
        with:
          name: kernel-image
          path: out/arch/arm64/boot/Image.gz-dtb
