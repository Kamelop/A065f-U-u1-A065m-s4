name: A06 Kernel Build

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            git-core gnupg flex bison build-essential zip curl zlib1g-dev \
            gcc-multilib g++-multilib libc6-dev-i386 libncurses5-dev \
            x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev \
            libxml2-utils xsltproc unzip python3 python-is-python3 ccache

      - name: Enable ccache
        run: |
          export PATH="/usr/lib/ccache:$PATH"
          ccache --max-size=10G
          echo "CCACHE_DIR=$GITHUB_WORKSPACE/.ccache" >> $GITHUB_ENV

      # ------------------------
      # Prepare repo binary
      # ------------------------
      - name: Prepare repo binary
        run: |
          mkdir -p $GITHUB_WORKSPACE/bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > $GITHUB_WORKSPACE/bin/repo
          chmod a+x $GITHUB_WORKSPACE/bin/repo
          echo "PATH=$GITHUB_WORKSPACE/bin:$PATH" >> $GITHUB_ENV

      # ------------------------
      # Kernel repo caching
      # ------------------------
      - name: Cache Kernel repo
        uses: actions/cache@v3
        with:
          path: kernel_build/.repo
          key: kernel-repo-${{ github.ref_name }}
          restore-keys: |
            kernel-repo-

      - name: Kernel repo initialization and sync
        run: |
          export PATH="$GITHUB_WORKSPACE/bin:$PATH"
          mkdir -p kernel_build
          cd kernel_build

          # Non-interactive repo init (skip if cached)
          if [ ! -d ".repo" ]; then
            repo init -u https://android.googlesource.com/kernel/manifest \
              -b common-android15-6.6 --depth=1 --quiet --no-repo-verify
          fi

          # Repo sync with timeout and retries
          MAX_RETRIES=3
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Kernel repo sync attempt $i..."
            if timeout 15m repo sync -j$(nproc) --no-clone-bundle --quiet --force-sync; then
              echo "Kernel repo sync completed successfully."
              break
            else
              echo "Attempt $i failed or timed out."
              if [ $i -eq $MAX_RETRIES ]; then
                echo "Max retries reached. Exiting."
                exit 1
              fi
            fi
          done

      # ------------------------
      # AOSP toolchain caching
      # ------------------------
      - name: Cache AOSP toolchain repo
        uses: actions/cache@v3
        with:
          path: aosp/.repo
          key: aosp-repo-${{ github.ref_name }}
          restore-keys: |
            aosp-repo-

      - name: Sync AOSP toolchain directories
        run: |
          export PATH="$GITHUB_WORKSPACE/bin:$PATH"
          mkdir -p $GITHUB_WORKSPACE/aosp
          cd $GITHUB_WORKSPACE/aosp

          # Minimal repo init (skip if cached)
          if [ ! -d ".repo" ]; then
            repo init -u https://android.googlesource.com/kernel/manifest \
              -b common-android14-6.1 --depth=1 --quiet --no-repo-verify
          fi

          # Repo sync with timeout and retries
          MAX_RETRIES=3
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Toolchain repo sync attempt $i..."
            if timeout 15m repo sync -j$(nproc) --no-clone-bundle --quiet --force-sync; then
              echo "Toolchain repo sync completed successfully."
              break
            else
              echo "Attempt $i failed or timed out."
              if [ $i -eq $MAX_RETRIES ]; then
                echo "Max retries reached. Exiting."
                exit 1
              fi
            fi
          done

          # Copy required directories to workspace root
          for dir in build external prebuilts tools; do
            if [ -d "$GITHUB_WORKSPACE/aosp/$dir" ]; then
              cp -r "$GITHUB_WORKSPACE/aosp/$dir" $GITHUB_WORKSPACE/
            else
              echo "Directory $dir not found in AOSP repo, skipping..."
            fi
          done

      # ------------------------
      # Build environment setup
      # ------------------------
      - name: Set Build Environment and Export Target Config
        run: |
          export DEVICE_MODULES_DIR="kernel_device_modules-6.6"
          export BUILD_CONFIG="../out/target/product/a06/obj/KERNEL_OBJ/build.config"
          export OUT_DIR="../out/target/product/a06/obj/KLEAF_OBJ"
          export DIST_DIR="../out/target/product/a06/obj/KLEAF_OBJ/dist"
          export DEFCONFIG_OVERLAYS="mt6768_overlay.config o8.config"
          export PROJECT="mgk_64_k66"
          export MODE="${GITHUB_RUNNER_NAME}"

          cd kernel
          python $DEVICE_MODULES_DIR/scripts/gen_build_config.py \
            --kernel-defconfig mediatek-bazel_defconfig \
            --kernel-defconfig-overlays "$DEFCONFIG_OVERLAYS" \
            --kernel-build-config-overlays "" \
            -m $MODE \
            -o $BUILD_CONFIG

      # ------------------------
      # Build kernel
      # ------------------------
      - name: Build Kernel
        run: |
          cd kernel
          source $BUILD_CONFIG
          ./kernel_device_modules-6.6/build.sh

      - name: Show ccache stats
        run: |
          ccache --show-stats

      - name: Upload Kernel Image
        uses: actions/upload-artifact@v4
        with:
          name: kernel-image
          path: out/arch/arm64/boot/Image.gz-dtb
